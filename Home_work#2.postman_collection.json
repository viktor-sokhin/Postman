{
	"info": {
		"_postman_id": "3f525642-01a6-4d26-9845-0fa8ee530b67",
		"name": "Home_work#2 Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Correct name\", () => {\r",
							"    var name = responseData.name;\r",
							"    pm.expect(name).to.eql(\"Viktor\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Correct age\", () => {\r",
							"    var age = responseData.age;\r",
							"    pm.expect(age).to.eql(\"31\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Correct salary\", () => {\r",
							"    var salary = +responseData.salary;\r",
							"    pm.expect(salary).to.eql(1000);\r",
							"})\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"pm.test(\"Equal names\", () => {\r",
							"    pm.expect(req.name).to.eql(responseData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age c request (age забрать из request.)\r",
							"pm.test(\"Equal ages\", () => {\r",
							"    pm.expect(req.age).to.eql(responseData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Equal salary\", () => {\r",
							"    pm.expect(+req.salary).to.eql(+responseData.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"var family = responseData.family\r",
							"console.log(family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary check\", () => {\r",
							"    pm.expect(+family.u_salary_1_5_year).to.eql(+responseData.salary * 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Viktor",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Third Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var body = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"pm.test(\"Equal names\", () => {\r",
							"    pm.expect(req.name).to.eql(body.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Equal ages\", () => {\r",
							"    pm.expect(req.age).to.eql(body.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Equal salary\", () => {\r",
							"    pm.expect(+req.salary).to.eql(body.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"var family = body.family;\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"var pets = family.pets;\r",
							"var dog = pets.dog;\r",
							"pm.test(\"Name check\", function () {\r",
							"    pm.expect(dog.name);\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Age check\", () => {\r",
							"    pm.expect(dog.age);\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Luky shot\", () => {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"4 year dog\", () => {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Viktor&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Viktor"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fourth Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name с request (name забрать из request.)\r",
							"pm.test(\"Equal names\", () => {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Equal ages\", () => {\r",
							"    pm.expect(+resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"var salary_arr = resp.salary\r",
							"console.log(salary_arr);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary_arr[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(salary_arr[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(salary_arr[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"First salary check\", () => {\r",
							"    pm.expect(+salary_arr[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Second salary check\", () => {\r",
							"    pm.expect(+salary_arr[1]).to.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Third salary check\", () => {\r",
							"    pm.expect(+salary_arr[2]).to.eql(+req.salary * 3);\r",
							"});\r",
							"\r",
							"//15/16/17. Создать в окружении переменную name/age/salary\r",
							"//Click on Environments => Chose Environment => In Variable field add a new variable name (name/age/salary)\r",
							"\r",
							"//18/19/20 Передать в окружение переменную name/age/salary\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age);\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(let i = 0; i <= salary_arr.lenght; i++) {\r",
							"    console.log(salary_arr[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Viktor&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Viktor"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fifth Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start_qa_salary check\", () => {\r",
							"    pm.expect(resp.start_qa_salary);\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months check\r",
							"pm.test(\"Qa_salary_after_6_months check\", () => {\r",
							"    pm.expect(resp.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months check\r",
							"pm.test(\"Qa_salary_after_12_months check\", () => {\r",
							"    pm.expect(resp.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year check\r",
							"pm.test(\"Qa_salary_after_1.5_year check\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Qa_salary_after_3.5_year check\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person check\", () => {\r",
							"    pm.expect(resp.person);\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response start_qa_salary VS Request salary\", () => {\r",
							"    pm.expect(+resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_6_months VS Request salary * 2\", () => {\r",
							"    pm.expect(+resp.qa_salary_after_6_months).to.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_12_months VS Request salary * 2.7\", () => {\r",
							"    pm.expect(+resp.qa_salary_after_12_months).to.eql(+req.salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_1.5_year VS Request salary * 3.3\", () => {\r",
							"    pm.expect(+resp[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_3.5_year VS Request salary * 3.8\", () => {\r",
							"    pm.expect(+resp[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var person = resp.person;\r",
							"\r",
							"pm.test(\"Person salary is\", () => {\r",
							"    pm.expect(+person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Person age is\", () => {\r",
							"    pm.expect(+person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary after 5 years\", () => {\r",
							"    pm.expect(+person.u_salary_5_years).to.eql(+req.salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var keys = Object.keys(person);\r",
							"var values = Object.values(person);\r",
							"\r",
							"for(let i = 0; i < keys.length; i++) {\r",
							"    console.log(`${keys[i]} : ${values[i]}`);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}